package userInterface;

import editor.TextBuffer;
import javafx.geometry.VPos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.text.Font;
import javafx.scene.text.Text;

public class KeyEventHandler {
	private final Scene scene;
	private final Group textRoot;
	private final TextBuffer tb;
	private final Cursor cursor;
	private Font font;
	
	
	public KeyEventHandler(Scene scene, Group textRoot, TextBuffer tb, Cursor cursor, Font font) {
		this.scene = scene;
		this.textRoot = textRoot;
		this.tb = tb;
		this.cursor = cursor;
		this.font = font;
	}

	public void handleTextInputEvent(KeyEvent event) {
		if (event.getCharacter().length() == 1) {
			handleTextInput(event);
		} 
		event.consume();
	}

	public void handleKeyEvent(KeyEvent event) {
		if (event.getCode() == KeyCode.BACK_SPACE) {
			handleBackspace(event);
		}
		if (event.getCharacter().length() == 0) {
			handleArrowInputs(event);
		}
		event.consume();
	}
	
	public void handleTextInput(KeyEvent event) {
		Text t = new Text(event.getCharacter());
		
		//write func to figure out text shifting if adding char in middle
		/*t.setTextOrigin(VPos.TOP);
		t.setX(cursor.getXPos());
		t.setY(cursor.getYPos());
		t.setFont(font);*/
		
		setTextPosition(t);
		
		//need func to figure out wrapping
		/*if (event.getCharacter().charAt(0) == '\r') {
			cursor.updatePos(0, Math.ceil(cursor.getYPos()+Utils.getFontHeight(font)));
		} else {
			double byY = 0; 
			cursor.updatePos(Math.ceil(cursor.getXPos()+Utils.getTextWidth(t)), cursor.getYPos()+byY);
		}*/
		
		setCursorPosition(t);
	}
	
	public void handleShortCuts(KeyEvent event) {
		
	}
	
	//*** if this shortens word, may need to move word up !! 
	public void handleBackspace(KeyEvent event) {
		if (textRoot.getChildren().size() == 0) return;
		
		Text t = tb.getCurTextObject();
		tb.delChar();
		textRoot.getChildren().remove(t);
		
		if (t.getText().charAt(0) == '\r') {
			cursor.updatePos(0, cursor.getYPos()-Utils.getFontHeight(font));
		} else {
			
		}
		cursor.updatePos(t.getX(), cursor.getYPos());
	}
	
	public void handleArrowInputs(KeyEvent event) {
		if (event.getCode() == KeyCode.RIGHT) {
			
		} else if (event.getCode() == KeyCode.LEFT) {
			
		} else if (event.getCode() == KeyCode.UP) {
			
		} else if (event.getCode() == KeyCode.DOWN) {
			
		}
	}
	
	public void setTextPosition(Text t) {
		//***have to add if adding spaces while at rightmost pos of screen
		double margin = textRoot.getLayoutX();
		double sceneWidth = scene.getWidth();
		double textRootMaxWidth = sceneWidth - margin;
		
		t.setTextOrigin(VPos.TOP);
		t.setFont(font);
		
		if (cursor.getXPos() + Utils.getTextWidth(t) > textRootMaxWidth) {
			t.setX(margin);
			t.setY(Math.ceil(cursor.getYPos() + Utils.getFontHeight(font)));
		} else {
			t.setX(cursor.getXPos());
			t.setY(cursor.getYPos());
		}
		
		tb.addChar(t);
		textRoot.getChildren().add(t);
	}
	
	//for moving cursor as a result of text input. also word wrapping longer words and such
	public void setCursorPosition(Text t) {
		double margin = textRoot.getLayoutX();
		if (t.getText().charAt(0) == '\r') {
			cursor.updatePos(margin, Math.ceil(cursor.getYPos()+Utils.getFontHeight(font)));
		} else {
			double byY = 0; 
			cursor.updatePos(Math.ceil(t.getX()+Utils.getTextWidth(t)), t.getY());
		}
	}

}
